********************************************************************************
* State Transition
********************************************************************************

This document highlights how actions, logic, and reducers interact
together to maintain this feature's state (a text document is used to
accommodate the wide free-format content).

TODO: Verify this (may have changed in feature migration)

Actions (see: actions.js)                        Logic (see: logic.js)                                Reducer (see: state.js)
==============================================   ===================================================  ===============================
eateries

  .dbPool
                                                      
    .changed(eateries) .............................................................................  - retain appState.eateries.dbPool (from action.eateries)
 
    .add(eateryId) .................................................................................  - NO NEED TO DO ANYTHING, due to Firebase real-time notifications
                                           addToPoolPrep:                                               ... we attempted to retain appState.eateries.dbPool[eateryId] with temporary entry
                                           =============                                                    in an attempt to makt "discovery check box" faster (but IT DIDN'T HELP)
                                             - issue discoveryAPI.getEateryDetail(eateryId)                 ... src/appState/dbPool.js
                                                 work: DISPATCH .eateryDetail(eatery)                           // temporal entry DONE STICTLY to show up faster in "discovery check box" 
                                                 fail: DISPATCH .eateryDetail.fail(eateryId, err)               // ... will be followed up by real entry (from Firebase real-time notifications)
                                                                                                                [actions.eateries.dbPool.add]: (state, action) => ( {...state, [action.eateryId]: tempEatery(action.eateryId)} ),
                                                                                                                ...
                                                                                                                const tempMsg = 'temporary entry (waiting for Firebase)';
                                                                                                                const tempEatery = (id) => ({
                                                                                                                  id,
                                                                                                                  name:    tempMsg,
                                                                                                                  phone:   tempMsg,
                                                                                                                  loc:     {lat:1, lng:1},
                                                                                                                  addr:    tempMsg,
                                                                                                                  navUrl:  tempMsg,
                                                                                                                  website: tempMsg,
                                                                                                                });
 
      .eateryDetail(eatery) ........................................................................  - NO NEED TO DO ANYTHING, due to Firebase real-time notifications
                                           addToPool:
                                           =========
                                             - issue firebase set
 
        .fail(eateryId, err) .......................................................................  - NONE
                                           NOTE: auto reported to user via logic:
                                                 diag.communicateUnexpectedErrors
                                                 MONITORING ALL .fail actions
 
 
    .remove(eateryId) ..............................................................................  - NO NEED TO DO ANYTHING, due to Firebase real-time notifications
                                           removeFromPool:                                              ... we tried deleting appState.eateries.dbPool[eateryId] of temporary entry
                                           ==============                                                   in an attempt to makt "discovery check box" faster (but IT DIDN'T HELP)
                                             - issue firebase set(null)
 
 
  .filter
    > iForm logic (auto-generated)         > iForm logic (auto-generated)                             > iForm logic (auto-generated)
    .open([domain] [,formMsg])                    
    .fieldChanged(fieldName, value)               
    .fieldTouched(fieldName)                      
    .process(values, domain) .......................................................................  - retain appState.eateries.listView.filter  (from action.domain)
                                           processFilter:
                                           =============
                                             DISPATCH view.change('eatery')
                                             DISPATCH eatery.filter.close()
      .reject(msgs)
    .close()
 
 
  .viewDetail(eateryId) ............................................................................  - retain appState.eateries.selectedEateryId (from action.eateryId)

    .close() .......................................................................................  - retain appState.eateries.selectedEateryId = null
 
 
  .spin ............................................................................................  - retain appState.eateries.spin (from action.spinMsg)
                                           spin:
                                           ====
                                             transform():                                           
                                             ---------
                                               supplement action.spinMsg
                                             process():
                                             ---------
                                               timeout (x secs)
                                                 DISPATCH actions.eateries.spin.complete(eateryId)
 
    .complete(eateryId) ............................................................................  - retain appState.eateries.spin = null
                                           spinComplete:
                                           ============
                                             DISPATCH actions.eateries.viewDetail(eateryId)


** cross-feature-communication: **
app.auth.actions
  .userProfileChanged(userProfile({name,pool})) ....................................................  - NONE
                                           monitorDbPool:
                                           =============
                                             monitor firebase DB pool changes (via firebase .database().ref(...pool).on
                                             DISPATCH eateries.changed(eateries[]) TODO: (DB Monitor tested via logs)
