********************************************************************************
* State Transition
********************************************************************************

This document highlights how actions, logic, and reducers interact
together to maintain this feature's state (a text document is used to
accommodate the wide free-format content).

TODO: ?? insure this is accurate

Actions (see: actions.js)                        Logic (see: logic.js)                                          Reducer (see: state.js)
==============================================   ============================================================   ===============================
device

 .bootstrap() ...............................................................................................   - NONE
                                                 loadResources:
                                                 =============
                                                   dispatch device.bootstrap.loadFonts()
                                                   dispatch device.bootstrap.locateDevice()

                                                 monitorInitProgress:
                                                 ===================
                                                   // monitor ANY device.bootstrap.*(complete|fail)
                                                   // ... central place to wait for needed resources
                                                   - monitor current state for
                                                     * fonts:    device.fontsLoaded:  true/false/errorString ... initial: false
                                                     * location: device.loc
                                                   - maintain status
                                                     * 'Waiting for Fonts to load' -OR- Font loading problem from errorString
                                                     * 'Waiting for Device Location'
                                                     * 'READY'                    ... specific state to start app!
                                                   - dispatch device.bootstrap.statusUpdate(msg)

   .loadFonts() .............................................................................................   - NONE
                                                 loadFonts:
                                                 =========
                                                   async: Expo.Font.loadAsync(...)
                                                          - THEN: dispatch .complete()
                                                          - ERR:  dispatch .fail(err)

     .complete() ............................................................................................   - set device.fontsLoaded = true

     .fail(err) .............................................................................................   - set device.fontsLoaded = 'Device fonts could NOT be loaded :-('

   .locateDevice() ..........................................................................................   - NONE
                                                 locateDevice:
                                                 ============
                                                   async:
                                                   // issue handler: notify user, dispatch fallback location, log optional err, done()
                                                   function handleIssue(msg, err=null) { ... } 
                                                   ... 
                                                   Permissions.askAsync(Permissions.LOCATION)
                                                     .then( ({status}) => {
                                                       if (status === 'granted') {
                                                         // obtain device geo location
                                                         Location.getCurrentPositionAsync({})
                                                           .then( (location) => {
                                                             // communicate device location
                                                             dispatch( actions.device.bootstrap.locateDevice.complete({lat: location.coords.latitude, 
                                                                                                                       lng: location.coords.longitude}) );
                                                           })
                                                           .catch( err => {
                                                             handleIssue('Could not obtain device location.', err);
                                                           });
                                                       }
                                                       else {
                                                         // permission denied
                                                         handleIssue('No access to device location.');
                                                       }
                                                     })
                                                     .catch( err => {
                                                       handleIssue('An issue was encountered in obtaining device location permission.', err);
                                                     });

     .complete(loc) .........................................................................................   - set device.loc = action.loc

     .fail(err) .............................................................................................   - NONE (not used I THINK - rely on UI alerts)

   .statusUpdate(statusMsg) .................................................................................   - set device.status = action.statusMsg
                                                     monitorDeviceReadiness:
                                                     ======================
                                                       if (action.statusMsg === 'READY')
                                                         dispatch device.ready

   .ready() .................................................................................................   - NONE (publicly exposed and monitored by 'auth' feature)
     
